import org.testng.annotations.*;

import java.io.*;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;

import static org.testng.Assert.*;

public class PenTest {
    Pen penWithIntParameter;
    Pen penWithIntDoubleParameters;
    Pen penWWithIntDoubleStringParameters;
    Class clazz = Class.forName(Pen.class.getName());
    Class paramInt = int.class;
    Class[] paramsIntDouble = {int.class, double.class};
    Class[] paramsIntDoubleString = {int.class, double.class, String.class};

    public PenTest() throws ClassNotFoundException {
    }

    /** Тест конструктора с одним параметром
     * @param inkContainerValue - сколько чернила в ручке
     */
    @Test(dataProvider = "penWithIntParameterDataProvider")
    public void testConstructorWithIntParameter(int inkContainerValue) throws  NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException {
        penWithIntParameter = (Pen)clazz.getConstructor(paramInt).newInstance(inkContainerValue);
        Field inkContainerValueField = clazz.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        int penContainerValue = inkContainerValueField.getInt(penWithIntParameter);
        System.out.println(penContainerValue);
        assertTrue(penContainerValue > 0);
    }
    @DataProvider(name = "penWithIntParameterDataProvider")
    public Object[][] penWithIntParameterDataProvider () {
        return new Object[][]{
                {10}, {5}
        };
    }

    /** Тест конструктора с двумя параметрами
     * @param inkContainerValue - сколько чернила в ручке
     * @param sizeLetter - размер букв, которые пишутся ручкой
     */
    @Test(dataProvider = "penWithIntDoubleParametersDataProvider")
    public void testConstructorWithIntDoubleParameters(int inkContainerValue, double sizeLetter) throws  NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException {
        penWithIntDoubleParameters = (Pen) clazz.getConstructor(paramsIntDouble).newInstance(inkContainerValue, sizeLetter);
        Field sizeLetterField = clazz.getDeclaredField("sizeLetter");
        sizeLetterField.setAccessible(true);
        double sizeLetterValue = sizeLetterField.getDouble(penWithIntDoubleParameters);
        System.out.println(sizeLetterValue);
        assertTrue(sizeLetterValue > 0);
    }
    @DataProvider(name = "penWithIntDoubleParametersDataProvider")
    public Object[][] penWWithIntDoubleParametersDataProvider () {
        return new Object[][]{
                {10, 1.0},
                {5, 10.0}
        };
    }

    /** Тест конструктора с тремя параметрами
     * @param inkContainerValue - сколько чернила в ручке
     * @param sizeLetter - размер букв, которые пишутся ручкой
     * @param color - цвет ручки
     */
    @Test(dataProvider = "penWithIntDoubleStringParametersDataProvider")
    public void testConstructorWithIntDoubleStringParameters(int inkContainerValue, double sizeLetter, String color) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException {
        penWWithIntDoubleStringParameters = (Pen) clazz.getConstructor(paramsIntDoubleString).newInstance(inkContainerValue, sizeLetter, color);
        Field colorField = clazz.getDeclaredField("color");
        colorField.setAccessible(true);
        String penColor = (String) colorField.get(penWWithIntDoubleStringParameters);
        System.out.println(color);
        assertTrue(penColor != "BLACK");
    }
    @DataProvider(name = "penWithIntDoubleStringParametersDataProvider")
    public Object[][] penWithIntDoubleStringParametersDataProvider () {
        return new Object[][]{
                {10, 5.0, "WHITE"},
                {5, 1.0, "BLUE"}
        };
    }

    /** Позитивный тест метода "write" с конструктором с двумя параметрами
     * @param inkContainerValue - сколько чернила в ручке
     * @param sizeLetter - размер букв, которые пишутся ручкой
     * @param word - значения для метода "write"
     */
    @Test(dataProvider = "writeMethodPenWithIntDoubleParametersPositiveDataProvider")
    public void testWriteMethodPenWithIntDoubleParametersPositive(int inkContainerValue, double sizeLetter, String word) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        penWithIntDoubleParameters = (Pen) clazz.getConstructor(paramsIntDouble).newInstance(inkContainerValue, sizeLetter);
        System.out.println("word = " + penWithIntDoubleParameters.write(word) );
        assertTrue(penWithIntDoubleParameters.write(word) == word);
    }
    @DataProvider(name = "writeMethodPenWithIntDoubleParametersPositiveDataProvider")
    public Object[][] writeMethodPenWithIntDoubleParametersPositiveDataProvider () {
        return new Object[][]{
                {10, 1.0, "One"},
                {15, 2.0, "Two"}
        };
    }

    /** Отрицательный тест метода "write" с конструктором с двумя параметрами
     * @param inkContainerValue - сколько чернила в ручке
     * @param sizeLetter - размер букв, которые пишутся ручкой
     * @param word - значения для метода "write"
     */
    @Test(dataProvider = "writeMethodPenWithIntDoubleParameterNegativeDataProvider")
    public void testWriteMethodPenWithIntDoubleParameterNegative(int inkContainerValue, double sizeLetter, String word) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException {
        penWithIntDoubleParameters = (Pen) clazz.getConstructor(paramsIntDouble).newInstance(inkContainerValue, sizeLetter);
        System.out.println("word = " + penWithIntDoubleParameters.write(word) );
        assertTrue(penWithIntDoubleParameters.write(word) == word);
    }
    @DataProvider(name = "writeMethodPenWithIntDoubleParameterNegativeDataProvider")
    public Object[][] writeMethodPenWithIntDoubleParameterNegativeDataProvider () {
        return new Object[][]{
                {2, 1.0, "One"},
                {10, 1.0, "   "},
                {2, 2.0, "Two"}
        };
    }

    /** Тест метода "getColor" с конструктором с одним параметром
     * @param inkContainerValue - сколько чернила в ручке
     */
    @Test(dataProvider = "penWithIntParameterDataProvider")
    public void testGetColorMethodPenWithIntParameter(int inkContainerValue) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        penWithIntParameter = (Pen) clazz.getConstructor(paramInt).newInstance(inkContainerValue);
        System.out.println(penWithIntParameter.getColor());
        assertEquals(penWithIntParameter.getColor(), "NO COLOR");
    }

    /** Тест метода "getColor" с конструктором с двумя параметрами
     * @param inkContainerValue - сколько чернила в ручке
     * @param sizeLetter - размер букв, которые пишутся ручкой
     */
    @Test(dataProvider = "penWithIntDoubleParametersDataProvider")
    public void testGetColorMethodPenWithIntDoubleParameters(int inkContainerValue, double sizeLetter) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        penWithIntDoubleParameters = (Pen) clazz.getConstructor(paramsIntDouble).newInstance(inkContainerValue, sizeLetter);
        System.out.println(penWithIntDoubleParameters.getColor());
        assertEquals(penWithIntDoubleParameters.getColor(), "NO COLOR");
    }

    /** Тест метода "getColor" с конструктором с тремя параметрами
     * @param inkContainerValue - сколько чернила в ручке
     * @param sizeLetter - размер букв, которые пишутся ручкой
     * @param color - цвет ручки
     */
    @Test(dataProvider = "penWithIntDoubleStringParametersDataProvider")
    public void testGetColorMethodPenWithIntDoubleStringParameters(int inkContainerValue, double sizeLetter, String color) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        penWWithIntDoubleStringParameters = (Pen) clazz.getConstructor(paramsIntDoubleString).newInstance(inkContainerValue, sizeLetter, color);
        System.out.println(penWWithIntDoubleStringParameters.getColor());
        assertEquals(penWWithIntDoubleStringParameters.getColor(), "BLUE");
    }

    /** Тест метода "isWork" с конструктором с одним параметром
     * @param inkContainerValue - сколько чернила в ручке
     */
    @Test(dataProvider = "penWithIntParameterDataProvider")
    public void testIsWorkPenWithIntParameter(int inkContainerValue) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        penWithIntParameter = (Pen) clazz.getConstructor(paramInt).newInstance(inkContainerValue);
        assertTrue(penWithIntParameter.isWork());
    }

    /** Тест метода "isWork" с конструктором с двумя параметрами
     * @param inkContainerValue - сколько чернила в ручке
     * @param sizeLetter - размер букв, которые пишутся ручкой
     */
    @Test(dataProvider = "penWithIntDoubleParametersDataProvider")
    public void testIsWorkPenWithIntDoubleParameters(int inkContainerValue, double sizeLetter) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        penWithIntDoubleParameters = (Pen) clazz.getConstructor(paramsIntDouble).newInstance(inkContainerValue, sizeLetter);
        assertTrue(penWithIntDoubleParameters.isWork());
    }

    /** Тест метода "isWork" с конструктором с тремя параметрами
     * @param inkContainerValue - сколько чернила в ручке
     * @param sizeLetter - размер букв, которые пишутся ручкой
     * @param color - цвет ручки
     */
    @Test(dataProvider = "penWithIntDoubleStringParametersDataProvider")
    public void testIsWorkPenWithIntDoubleStringParameters(int inkContainerValue, double sizeLetter, String color) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        penWWithIntDoubleStringParameters = (Pen) clazz.getConstructor(paramsIntDoubleString).newInstance(inkContainerValue, sizeLetter, color);
        assertTrue(penWWithIntDoubleStringParameters.isWork());
    }

    /** Тест метода "doSomethingElse" с конструктором с одним параметром
     * @param inkContainerValue - сколько чернила в ручке
     */
    @Test(dataProvider = "penWithIntParameterDataProvider")
    public void testDoSomethingElsePenWithIntParameter(int inkContainerValue) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        System.setOut(new PrintStream(output));
        penWithIntParameter = (Pen) clazz.getConstructor(paramInt).newInstance(inkContainerValue);
        penWithIntParameter.doSomethingElse();
        assertEquals(output.toString(), "BLUE");
        System.setOut(null);
    }

}
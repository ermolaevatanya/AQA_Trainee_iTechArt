import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;

import static org.testng.Assert.*;

public class PenTest {

    @Test(dataProvider = "pen1DataProvider")
    public void testWriteMethodPen1(String str) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException {
        Pen pen1 = null;
        Class clazz = Class.forName(Pen.class.getName());
        Class param = int.class;
        pen1 = (Pen) clazz.getConstructor(param).newInstance(1000);
        Field inkContainerValueField = clazz.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        int inkContainerValue = inkContainerValueField.getInt(pen1);

        pen1.write(str);
        System.out.println("data is: " + str);
        assertTrue(inkContainerValue > 0, "Fail");
    }
    @DataProvider(name = "pen1DataProvider")
    public Object[][] pen1DataProvider () {
        return new Object[][]{
                {"one"}, {"two"}
        };
    }

    @Test(dataProvider = "pen2DataProvider")
    public void testWriteMethodPen2(String str) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException {
        Pen pen2 = null;
        Class clazz = Class.forName(Pen.class.getName());
        Class[] params = {int.class, double.class};
        pen2 = (Pen) clazz.getConstructor(params).newInstance(1000, 1.0);
        Field sizeLetterField = clazz.getDeclaredField("sizeLetter");
        sizeLetterField.setAccessible(true);
        double sizeLetter = sizeLetterField.getDouble(pen2);

        pen2.write(str);
        System.out.println("data is: " + str);
        assertTrue(sizeLetter > 0, "Fail");
    }
    @DataProvider(name = "pen2DataProvider")
    public Object[][] pen2DataProvider () {
        return new Object[][]{
                {"three"}, {"four"}
        };
    }

    @Test(dataProvider = "pen3DataProvider")
    public void testWriteMethodPen3(String str) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException {
        Pen pen3 = null;
        Class clazz = Class.forName(Pen.class.getName());
        Class[] params = {int.class, double.class, String.class};
        pen3 = (Pen) clazz.getConstructor(params).newInstance(1000, 1.0, "BLUE");
        Field colorField = clazz.getDeclaredField("color");
        colorField.setAccessible(true);
        String color = (String) colorField.get(pen3);

        pen3.write(str);
        System.out.println("data is: " + str);
        assertEquals(color, "BLUE", "Different");
    }
    @DataProvider(name = "pen3DataProvider")
    public Object[][] pen3DataProvider () {
        return new Object[][]{
                {"five"}, {"six"}
        };
    }

    @Test
    public void testGetColorPen1() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Pen pen1 = null;
        Class clazz = Class.forName(Pen.class.getName());
        Class param = int.class;
        pen1 = (Pen) clazz.getConstructor(param).newInstance(1000);

        pen1.getColor();
        assertNotEquals("BLUE", "NO COLOR", "Same");
    }

    @Test
    public void testGetColorPen2() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Pen pen2 = null;
        Class clazz = Class.forName(Pen.class.getName());
        Class[] params = {int.class, double.class};
        pen2 = (Pen) clazz.getConstructor(params).newInstance(1000, 1.0);

        pen2.getColor();
        assertNotEquals("BLUE", "NO COLOR", "Same");
    }

    @Test
    public void testGetColorPen3() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Pen pen3 = null;
        Class clazz = Class.forName(Pen.class.getName());
        Class[] params = {int.class, double.class, String.class};
        pen3 = (Pen) clazz.getConstructor(params).newInstance(1000, 1.0, "BLUE");

        pen3.getColor();
        assertEquals("BLUE", "BLUE", "Different");
    }

    @Test
    public void testIsWorkPen1() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Pen pen1 = null;
        Class clazz = Class.forName(Pen.class.getName());
        Class param = int.class;
        pen1 = (Pen) clazz.getConstructor(param).newInstance(1000);

        assertTrue(pen1.isWork(), "Fail");
    }

    @Test
    public void testIsWorkPen2() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Pen pen2 = null;
        Class clazz = Class.forName(Pen.class.getName());
        Class[] params = {int.class, double.class};
        pen2 = (Pen) clazz.getConstructor(params).newInstance(1000, 1.0);

        assertTrue(pen2.isWork(), "Fail");
    }

    @Test
    public void testIsWorkPen3() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Pen pen3 = null;
        Class clazz = Class.forName(Pen.class.getName());
        Class[] params = {int.class, double.class, String.class};
        pen3 = (Pen) clazz.getConstructor(params).newInstance(1000, 1.0, "BLUE");

        assertTrue(pen3.isWork(), "Fail");
    }

    @Test
    public void testDoSmthElsePen1() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Pen pen1 = null;
        Class clazz = Class.forName(Pen.class.getName());
        Class param = int.class;
        pen1 = (Pen) clazz.getConstructor(param).newInstance(1000);

        pen1.doSomethingElse();
        assertEquals("BLUE", "BLUE", "Different");
    }

    @Test
    public void testDoSmthElsePen2() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Pen pen2 = null;
        Class clazz = Class.forName(Pen.class.getName());
        Class[] params = {int.class, double.class};
        pen2 = (Pen) clazz.getConstructor(params).newInstance(1000, 1.0);

        pen2.doSomethingElse();
        assertEquals("BLUE", "BLUE", "Different");
    }

    @Test
    public void testDoSmthElsePen3() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Pen pen3 = null;
        Class clazz = Class.forName(Pen.class.getName());
        Class[] params = {int.class, double.class, String.class};
        pen3 = (Pen) clazz.getConstructor(params).newInstance(1000, 1.0, "BLUE");

        pen3.doSomethingElse();
        assertEquals("BLUE", "BLUE", "Different");
    }
}